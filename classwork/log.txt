pandas → for data handling
numpy → for numerical operations
matplotlib.pyplot → for plotting graphs



*in DataFrames: row -> entries
               columns -> features
*ml model only accepts numeric value, need to drop or convert object values



housing.head():
Shows you the first 5 rows of your dataset
housing.head(10) shows first 10





housing.info():
Total rows and columns
Data types (int64, object, etc.)
Memory usage
How many non-null (non-missing) values are in each column





housing.describe():
Count, mean, min, max
Standard deviation (std)
25%, 50% (median), 75% percentiles






import numpy as np  
def split_train_test(data, test_ratio):
    np.random.seed(42)  # Make the shuffle reproducible (same result each time)
    shuffled = np.random.permutation(len(data))  # Shuffle the indices
    print(shuffled)  # Optional: print the shuffled row indices
    test_set_size = int(len(data) * test_ratio)  # How many go to test set
    test_indices = shuffled[:test_set_size]      # First N go to test
    train_indices = shuffled[test_set_size:]     # Rest go to train
    return data.iloc[train_indices], data.iloc[test_indices]  # Return two DataFrames    :::

Sets a random seed using np.random.seed(42) to make results reproducible.
Randomly shuffles the row indices of the dataset using np.random.permutation()
Calculates how many rows should be in the test set based on a test_ratio (e.g., 0.2 for 20%).
Uses the shuffled indices to slice the dataset into a training set and a test set using iloc.
Returns the two sets so they can be used to train and evaluate a machine learning model.